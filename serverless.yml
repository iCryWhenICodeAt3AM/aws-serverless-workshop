org: ecvph
service: python-serverless-rey

provider:
  name: aws
  runtime: python3.12
  role: ${env:ROLE}
  stage: dev  # Default stage value
  tracing:
    lambda: true  # Enable X-Ray tracing for Lambda
    apiGateway: true  # Enable tracing for API Gateway
  environment:
    PRODUCTS_TABLE: ${env:PRODUCTS_TABLE}
    PRODUCTS_INVENTORY_TABLE: ${env:PRODUCTS_INVENTORY_TABLE}
    PRODUCT_NAME_TABLE: ${env:PRODUCT_NAME_TABLE}
    PADELIVER_PRODUCTS_TABLE: ${env:PADELIVER_PRODUCTS_TABLE}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    PADELIVER_ORDERS_TABLE: ${env:PADELIVER_ORDERS_TABLE}  # New environment variable

functions:
  viewProduct:
    handler: handlers/productHandler.view_product_handler
    events:
      - httpApi:
          path: /api/product
          method: get
  getAllProductNames:
    handler: handlers/productHandler.get_all_product_names_handler
    events:
      - httpApi:
          path: /api/product-names
          method: get
  getPadeliverProducts:
    handler: handlers/padeliverHandler.get_padeliver_products
    events:
      - httpApi:
          path: /api/padeliver-products
          method: get
  addToCart:
    handler: handlers/cartHandler.add_to_cart
    events:
      - httpApi:
          path: /api/cart/{user_id}
          method: post
  getCart:
    handler: handlers/cartHandler.get_cart
    events:
      - httpApi:
          path: /api/cart/{user_id}
          method: get
  getPadeliverProductNames:
    handler: handlers/padeliverHandler.get_padeliver_product_names
    events:
      - httpApi:
          path: /api/padeliver-product-names
          method: get
  viewPadeliverProductByIdOrName:
    handler: handlers/padeliverHandler.view_padeliver_product_by_id_or_name
    events:
      - httpApi:
          path: /api/padeliver-product/view
          method: get
  viewPadeliverProductByIdOrNameWithUser:
    handler: handlers/padeliverHandler.view_padeliver_product_by_id_or_name_with_user
    events:
      - httpApi:
          path: /api/padeliver-product/view/{user_id}
          method: get
  addPadeliverInventory:
    handler: handlers/padeliverHandler.add_padeliver_inventory
    events:
      - httpApi:
          path: /api/padeliver-inventory
          method: post
  placeOrder:
    handler: handlers/cartHandler.place_order
    events:
      - httpApi:
          path: /api/cart/{user_id}/place-order
          method: post
  getFormattedCart:
    handler: handlers/cartHandler.get_formatted_cart
    events:
      - httpApi:
          path: /api/cart/{user_id}/formatted
          method: get
  getPadeliverProductsWithStock:
    handler: handlers/padeliverHandler.get_padeliver_products_with_stock
    events:
      - httpApi:
          path: /api/padeliver-products-with-stock
          method: get
  addPadeliverProduct:
    handler: handlers/padeliverHandler.add_padeliver_product
    events:
      - httpApi:
          path: /api/padeliver-product
          method: post
  editPadeliverProduct:
    handler: handlers/padeliverHandler.edit_padeliver_product
    events:
      - httpApi:
          path: /api/padeliver-product
          method: put
  deletePadeliverProduct:
    handler: handlers/padeliverHandler.delete_padeliver_product
    events:
      - httpApi:
          path: /api/padeliver-product
          method: delete
  batchCreatePadeliverProducts:
    handler: handlers/padeliverHandler.batch_create_padeliver_products
    events:
      - httpApi:
          path: /api/padeliver-products/batch
          method: post
  processPadeliverCsv:
    handler: handlers/padeliverHandler.process_padeliver_csv
    events:
      - s3:
          bucket: ${env:S3_BUCKET_NAME}  # Use the existing bucket specified in the environment variable
          event: s3:ObjectCreated:*
          rules:
            - prefix: for_padeliver_create/
            - suffix: .csv
          existing: true  # Use the existing bucket without creating a new one
  getAllInventory:
    handler: handlers/inventoryHandler.get_all_inventory
    events:
      - httpApi:
          path: /api/inventory
          method: get
  getOrders:
    handler: handlers/cartHandler.get_orders
    events:
      - httpApi:
          path: /api/orders/{user_id}
          method: get
  getAllOrders:
    handler: handlers/cartHandler.get_all_orders
    events:
      - httpApi:
          path: /api/orders
          method: get
  updateOrderStatus:
    handler: handlers/cartHandler.update_order_status
    events:
      - httpApi:
          path: /api/orders/update-status
          method: patch
  generateReceipt:
    handler: handlers/cartHandler.generate_receipt
    events:
      - httpApi:
          path: /api/orders/generate-receipt
          method: post
  editCartProductQuantity:
    handler: handlers/cartHandler.edit_cart_product_quantity
    events:
      - httpApi:
          path: /api/cart/{user_id}/edit
          method: put
  deleteCartProduct:
    handler: handlers/cartHandler.delete_cart_product
    events:
      - httpApi:
          path: /api/cart/{user_id}/delete
          method: delete

custom:
  prune:
    automatic: true
    number: 3  # Keep only the latest 3 versions of each function
  serverless-offline:
    httpPort: 3000  # Enable local testing
  exclude:
    - .git/**
    - .serverless/**
    - node_modules/**
    - tests/**
    - docs/**
    - venv/**
    - .venv/**
    - .gitignore
    - .gitattributes
    - .vscode/**

plugins:
  - serverless-prune-plugin
  - serverless-offline  # Added for local testing
  - serverless-dotenv-plugin  # Load environment variables from .env
