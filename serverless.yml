org: ecvph
service: python-serverless-rey

provider:
  name: aws
  runtime: python3.12
  role: ${env:ROLE}
  tracing:
    lambda: true  # Enable X-Ray tracing for Lambda
    apiGateway: true  # Enable tracing for API Gateway
  environment:
    PRODUCTS_TABLE: ${env:PRODUCTS_TABLE}
    PRODUCTS_INVENTORY_TABLE: ${env:PRODUCTS_INVENTORY_TABLE}
    PRODUCT_NAME_TABLE: ${env:PRODUCT_NAME_TABLE}

functions:
  hello:
    handler: handlers/helloHandler.hello_handler
    events:
      - httpApi:
          path: /
          method: get
  createOneProduct:
    handler: handlers/productHandler.create_one_product
    events:
      - httpApi:
          path: /products
          method: post

  getAllProducts:
    handler: handlers/productHandler.get_all_products_handler
    events:
      - httpApi:
          path: /products
          method: get
  productModification:
    handler: handlers/productHandler.product_modification
    events:
      - httpApi:
          path: /product_modification
          method: get
      - httpApi:
          path: /product_modification
          method: put
      - httpApi:
          path: /product_modification
          method: delete
      - httpApi:
          path: /product_modification
          method: post
  batchCreateProducts:
    handler: handlers/productBatchHandler.batch_create_products_handler
    events:
      - s3:
          bucket: products-s3-rey
          event: s3:ObjectCreated:*
          rules:
            - prefix: for_create/
          existing: true
  batchDeleteProducts:
    handler: handlers/productBatchHandler.batch_delete_products_handler
    events:
      - s3:
          bucket: products-s3-rey
          event: s3:ObjectCreated:*
          rules:
            - prefix: for_delete/
          existing: true
  processSqsMessage:
    handler: handlers/sqsHandler.process_sqs_message
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ProductsQueue
              - Arn
          batchSize: 1
  viewProduct:
    handler: handlers/productHandler.view_product_handler
    events:
      - httpApi:
          path: /API/product
          method: get
  getAllProductNames:
    handler: handlers/productHandler.get_all_product_names_handler
    events:
      - httpApi:
          path: /API/product-names
          method: get

custom:
  prune:
    automatic: true
    number: 3  # Keep only the latest 3 deployments
  serverless-offline:
    httpPort: 3000  # Enable local testing
  exclude:
    - .git/**
    - .serverless/**
    - node_modules/**
    - tests/**
    - docs/**

plugins:
  - serverless-prune-plugin
  - serverless-offline  # Added for local testing
  - serverless-dotenv-plugin  # Load environment variables from .env

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    ProductsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: products-queue-rey-sqs
        VisibilityTimeout: 30
        MessageRetentionPeriod: 86400  # Messages are kept for 1 day
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt ProductsDeadLetterQueue.Arn
          maxReceiveCount: 5
    ProductsDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: products-queue-rey-dlq
        MessageRetentionPeriod: 1209600  # Messages kept for 14 days
    ProductCreationEventRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: custom-rey-event-bus
        EventPattern:
          source:
            - "com.rey.products"
          detail-type:
            - "create_product"
        State: ENABLED