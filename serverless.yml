org: ecvph
service: python-serverless-rey

provider:
  name: aws
  runtime: python3.12
  role: ${env:ROLE}
  stage: dev  # Default stage value
  tracing:
    lambda: true  # Enable X-Ray tracing for Lambda
    apiGateway: true  # Enable tracing for API Gateway
  environment:
    PRODUCTS_TABLE: ${env:PRODUCTS_TABLE}
    PRODUCTS_INVENTORY_TABLE: ${env:PRODUCTS_INVENTORY_TABLE}
    PRODUCT_NAME_TABLE: ${env:PRODUCT_NAME_TABLE}
    PADELIVER_PRODUCTS_TABLE: ${env:PADELIVER_PRODUCTS_TABLE}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}

functions:
  viewProduct:
    handler: handlers/productHandler.view_product_handler
    events:
      - httpApi:
          path: /api/product
          method: get
  getAllProductNames:
    handler: handlers/productHandler.get_all_product_names_handler
    events:
      - httpApi:
          path: /api/product-names
          method: get
  getPadeliverProducts:
    handler: handlers/padeliverHandler.get_padeliver_products
    events:
      - httpApi:
          path: /api/padeliver-products
          method: get
  addToCart:
    handler: handlers/cartHandler.add_to_cart
    events:
      - httpApi:
          path: /api/cart/{user_id}
          method: post
  getCart:
    handler: handlers/cartHandler.get_cart
    events:
      - httpApi:
          path: /api/cart/{user_id}
          method: get
  getPadeliverProductNames:
    handler: handlers/padeliverHandler.get_padeliver_product_names
    events:
      - httpApi:
          path: /api/padeliver-product-names
          method: get
  viewPadeliverProductByIdOrName:
    handler: handlers/padeliverHandler.view_padeliver_product_by_id_or_name
    events:
      - httpApi:
          path: /api/padeliver-product/view
          method: get
  viewPadeliverProductByIdOrNameWithUser:
    handler: handlers/padeliverHandler.view_padeliver_product_by_id_or_name_with_user
    events:
      - httpApi:
          path: /api/padeliver-product/view/{user_id}
          method: get
  addPadeliverInventory:
    handler: handlers/padeliverHandler.add_padeliver_inventory
    events:
      - httpApi:
          path: /api/padeliver-inventory
          method: post
  checkout:
    handler: handlers/cartHandler.checkout
    events:
      - httpApi:
          path: /api/cart/{user_id}/checkout
          method: post
  getFormattedCart:
    handler: handlers/cartHandler.get_formatted_cart
    events:
      - httpApi:
          path: /api/cart/{user_id}/formatted
          method: get
  getPadeliverProductsWithStock:
    handler: handlers/padeliverHandler.get_padeliver_products_with_stock
    events:
      - httpApi:
          path: /api/padeliver-products-with-stock
          method: get
  addPadeliverProduct:
    handler: handlers/padeliverHandler.add_padeliver_product
    events:
      - httpApi:
          path: /api/padeliver-product
          method: post
  editPadeliverProduct:
    handler: handlers/padeliverHandler.edit_padeliver_product
    events:
      - httpApi:
          path: /api/padeliver-product
          method: put
  deletePadeliverProduct:
    handler: handlers/padeliverHandler.delete_padeliver_product
    events:
      - httpApi:
          path: /api/padeliver-product
          method: delete

custom:
  prune:
    automatic: true
    number: 3  # Keep only the latest 3 versions of each function
  serverless-offline:
    httpPort: 3000  # Enable local testing
  exclude:
    - .git/**
    - .serverless/**
    - node_modules/**
    - tests/**
    - docs/**
    - venv/**
    - .venv/**
    - .gitignore
    - .gitattributes
    - .vscode/**

plugins:
  - serverless-prune-plugin
  - serverless-offline  # Added for local testing
  - serverless-dotenv-plugin  # Load environment variables from .env

# resources:
#   Resources:
#     ProductsTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${env:PRODUCTS_TABLE}
#         AttributeDefinitions:
#           - AttributeName: product_id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: product_id
#             KeyType: HASH
#         BillingMode: PAY_PER_REQUEST
#         StreamSpecification:
#           StreamViewType: NEW_IMAGE
#     ProductsQueue:
#       Type: AWS::SQS::Queue
#       Properties:
#         QueueName: products-queue-rey-sqs
#         VisibilityTimeout: 30
#         MessageRetentionPeriod: 86400  # Messages are kept for 1 day
#         RedrivePolicy:
#           deadLetterTargetArn: !GetAtt ProductsDeadLetterQueue.Arn
#           maxReceiveCount: 5
#     ProductsDeadLetterQueue:
#       Type: AWS::SQS::Queue
#       Properties:
#         QueueName: products-queue-rey-dlq
#         MessageRetentionPeriod: 1209600  # Messages kept for 14 days
#     ProductCreationEventRule:
#       Type: AWS::Events::Rule
#       Properties:
#         EventBusName: custom-rey-event-bus
#         EventPattern:
#           source:
#             - "com.rey.products"
#           detail-type:
#             - "create_product"
#         State: ENABLED
#     UserCartsTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: user_carts
#         AttributeDefinitions:
#           - AttributeName: user_id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: user_id
#             KeyType: HASH
#         BillingMode: PAY_PER_REQUEST
#     CustomResourceLogGroup:
#       Type: AWS::Logs::LogGroup
#       Properties:
#         LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-custom-resource-existing-s3-${sls:instanceId}
#         RetentionInDays: 14